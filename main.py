import asyncio
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)
from keyboards import *
from utils import *
from news_service import get_news_for_assets
from telegram import ReplyKeyboardRemove 

from CombineParceModule import parse_news
from ai import get_news


(
    STATE_SELECT_ASSETS,        # –≠–∫—Ä–∞–Ω 2: –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–æ–≤
    STATE_SET_FREQUENCY,        # –≠–∫—Ä–∞–Ω 3: –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
    STATE_MAIN_MENU,            # –≠–∫—Ä–∞–Ω 4: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    STATE_BOT_SETTINGS,         # –≠–∫—Ä–∞–Ω 5: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    STATE_MANUAL_INPUT,         # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–æ–≤
    STATE_UNSUBSCRIBE           # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∞–∫—Ç–∏–≤–æ–≤
) = range(6)

# –ü–æ–¥–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–æ–≤
COLLECTIONS = {
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": ["BTC", "ETH", "BNB", "XRP", "ADA"],
    "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã": ["USD", "EUR", "JPY", "GBP", "CNY"],
    "–ê–∫—Ü–∏–∏ –†–§": ["GAZP", "SBER", "LKOH", "MGNT", "ROSN"]
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start - –æ—Ç—Å—é–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –í–°–ï
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        reply_markup=assets_keyboard()
    )
    return STATE_SELECT_ASSETS


# ===–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ===

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    return STATE_MAIN_MENU


# 0. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await main_menu(update, context)
    return STATE_MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await main_menu(update, context)
    return STATE_MAIN_MENU


# 1. –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π
async def fetch_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subs = load_subscriptions()
    await update.message.reply_text(get_news(subs), reply_markup=main_menu_keyboard())


# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_keyboard())
    return STATE_BOT_SETTINGS

# 2.1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def settings_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∞–∫—Ç–∏–≤—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await update.message.reply_text(
        "üîç –ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        reply_markup=assets_keyboard()
    )
    return STATE_SELECT_ASSETS

#–†—É—á–Ω–æ–π –≤–≤–æ–¥

async def ask_manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç–∏–≤—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–ü—Ä–∏–º–µ—Ä: BTC, ETH, AAPL",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"]], resize_keyboard=True)
    )
    return STATE_MANUAL_INPUT

async def handle_manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–æ–≤"""
    user_id = update.effective_user.id
    assets = update.message.text.split(',')
    added = add_assets(user_id, assets)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞
    if not added:
        message = "‚ÑπÔ∏è –í—Å–µ –∞–∫—Ç–∏–≤—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ –∏–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç."
    else:
        message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(added)}\n–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã: {', '.join(added)}"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subs = load_subscriptions()
    user_assets = subs.get(str(user_id), {}).get("assets", [])
    
    if user_assets:
        message += f"\nüìã –í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã: {', '.join(user_assets)}"
    
    await update.message.reply_text(
        message,
        reply_markup=assets_keyboard()
    )
    return STATE_SELECT_ASSETS

#–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
""""
async def handle_manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assets = [a.strip() for a in update.message.text.split(",")]
    add_assets(update.effective_user.id, assets)
    await update.message.reply_text("‚úÖ –ê–∫—Ç–∏–≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=assets_keyboard())
    return STATE_SELECT_ASSETS
"""

#–ü–æ–¥–±–æ—Ä–∫–∏

async def show_collections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫"""
    await update.message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –ø–æ–¥–±–æ—Ä–∫—É –∞–∫—Ç–∏–≤–æ–≤:",
        reply_markup=collections_keyboard()
    )
    return STATE_SELECT_ASSETS

async def handle_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏"""
    collection_name = update.message.text
    collection_map = {
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": ["BTC", "ETH", "BNB", "XRP", "ADA"],
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã": ["USD", "EUR", "JPY", "GBP", "CNY"],
        "–ê–∫—Ü–∏–∏ –†–§": ["GAZP", "SBER", "LKOH", "MGNT", "ROSN"]
    }
    
    if collection_name in collection_map:
        user_id = update.effective_user.id
        add_assets(user_id, collection_map[collection_name])
        await update.message.reply_text(
            f"‚úÖ –ü–æ–¥–±–æ—Ä–∫–∞ ¬´{collection_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=assets_keyboard()
        )
    return STATE_SELECT_ASSETS

async def back_to_assets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤"""
    await update.message.reply_text(
        "üîç –ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        reply_markup=assets_keyboard()
    )
    return STATE_SELECT_ASSETS


# 2.2. –û—Ç–ø–∏—Å–∞—Ç—å—Å—è
async def settings_unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–∫—Ç–∏–≤–æ–≤"""
    user_id = update.effective_user.id
    subs = load_subscriptions()
    assets = subs.get(str(user_id), {}).get("assets", [])
    
    if not assets:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏!")
        return STATE_BOT_SETTINGS
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
    keyboard = [[asset] for asset in assets] + [["–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö"], ["–ù–∞–∑–∞–¥"]]
    await update.message.reply_text(
        "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return STATE_UNSUBSCRIBE

async def handle_unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"""
    user_id = update.effective_user.id
    choice = update.message.text
    subs = load_subscriptions()
    user_subs = subs.get(str(user_id), {})
    
    if choice == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö":
        user_subs["assets"] = []
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤!")
    elif choice == "–ù–∞–∑–∞–¥":
        await settings(update, context)
        return STATE_BOT_SETTINGS
    else:
        if choice in user_subs.get("assets", []):
            user_subs["assets"].remove(choice)
            await update.message.reply_text(f"‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {choice}!")
    
    save_subscriptions(subs)
    await settings(update, context)
    return STATE_BOT_SETTINGS


# 3. –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úâÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @Mr_Shushunya")




''' # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ -> –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
async def finish_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=frequency_keyboard())
    return STATE_SET_FREQUENCY
'''

""""async def settings_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    keyboard = [
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–¥–∏–Ω —Ä–∞–∑", "–†–∞–∑ –≤ 5 –º–∏–Ω"],
        ["–†–∞–∑ –≤ 30 –º–∏–Ω", "–†–∞–∑ –≤ —á–∞—Å"],
        ["1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", "–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"],
        ["–ù–∞–∑–∞–¥"]
    ]
    await update.message.reply_text(
        "‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return STATE_SET_FREQUENCY
"""

"""async def set_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    frequency = update.message.text
    frequency_map = {
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–¥–∏–Ω —Ä–∞–∑": "once",
        "–†–∞–∑ –≤ 5 –º–∏–Ω": "5min",
        "–†–∞–∑ –≤ 30 –º–∏–Ω": "30min",
        "–†–∞–∑ –≤ —á–∞—Å": "hourly",
        "1 —Ä–∞–∑ –≤ –¥–µ–Ω—å": "daily",
        "–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É": "off"
    }"""



# –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.
# –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: –Ω–µ —É—Å–ø–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å –º–æ–¥—É–ª—å –±–æ—Ç–∞ —Å –º–æ–¥—É–ª–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞.
# –ü–ª–∞–Ω–∏—Ä—É—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –∏—é–Ω–µ 2025.
#
'''
async def update_news():
    while True:
        await asyncio.sleep(5)
'''

if __name__ == "__main__":
    app = Application.builder().token("iwontshowyoumytoken").build()
    
    conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        STATE_SELECT_ASSETS: [
            MessageHandler(filters.Regex(r"^–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é$"), ask_manual_input),
            MessageHandler(filters.Regex(r"^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫–∏$"), show_collections),
            MessageHandler(filters.Regex(r"^–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–¥–±–æ—Ä$"), back_to_main),
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–æ–∫
            MessageHandler(filters.Regex(r"^(–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã|–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã|–ê–∫—Ü–∏–∏ –†–§)$"), handle_collection),
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            MessageHandler(filters.Regex(r"^–ù–∞–∑–∞–¥$"), back_to_assets)
        ],
        STATE_MANUAL_INPUT: [
            MessageHandler(filters.Regex(r"^–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥$"), back_to_assets),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_input)
        ],
        STATE_MAIN_MENU: [
            MessageHandler(filters.Regex(r"^–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏$"), fetch_news),
            MessageHandler(filters.Regex(r"^–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞$"), settings),
            MessageHandler(filters.Regex(r"^–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É$"), support)
        ],
        STATE_BOT_SETTINGS: [
            MessageHandler(filters.Regex(r"^–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ç–∏–≤—ã$"), settings_subscribe),
            MessageHandler(filters.Regex(r"^–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞–∫—Ç–∏–≤–æ–≤$"), settings_unsubscribe),
            #MessageHandler(filters.Regex(r"^–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏$"), settings_frequency),
            MessageHandler(filters.Regex(r"^–ù–∞–∑–∞–¥$"), back_to_main)
        ],
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
        STATE_UNSUBSCRIBE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unsubscribe)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.run_polling()
